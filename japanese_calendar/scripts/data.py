# -*- coding: utf-8 -*-
from __future__ import absolute_import, unicode_literals

import datetime

import japanese_calendar

constants_template = """# -*- coding: utf-8 -*-
# this file is generated by chinese_calendar.scripts.generate_constants
from __future__ import absolute_import, unicode_literals

import datetime
from enum import Enum


class Holiday(Enum):
    def __new__(cls, english, chinese, days):
        obj = object.__new__(cls)
        obj._value_ = english

        obj.chinese = chinese
        obj.days = days
        return obj

    new_years_day = "New Year's Day", "元旦", 1
    coming_of_age_day = "Coming of Age Day","成人节",1
    beginning_of_spring_day = "Beginning of Spring Day","春分节",1
    national_foundation_day = "National Foundation Day","建国日",1
    emperor_birthday = "Emperor Birthday","天皇诞辰",1
    showa_day = "Showa Day","昭和之日",1
    constitution_day = "Constitution Day","宪法纪念日",1
    greenery_day = "Greenery Day","绿之日",1
    children_day = "Children Day",1
    ocean_day = "Ocean Day",1
    mountain_day = "Mountain Day",1
    respect_for_aged_day = "Respect for Aged Day",1
    autumn_equinox_day = "Autumn Equinox Day",1
    health_and_sports_day = "Health and Sports Day",1
    culture_day = "Culture Day",1
    labor_thanksgiving_day = "Labor Thanksgiving Day",1
    

holidays = {}

workdays = {}

in_lieu_days = {}
"""


class Arrangement(object):
    WORKDAY = 1
    HOLIDAY = 2
    IN_LIEU = 3

    def __init__(self):
        self.holidays = {}
        self.workdays = {}
        self.in_lieu_days = {}

        self.year = None
        self.month = None
        self.day = None
        self.holiday = None
        self.day_type = None

        for method in dir(self):
            try:
                int(method[1:])
                getattr(self, method)()
            except ValueError:
                pass

    # fmt: off
    def _2024(self):
        """ https://holidays-calendar.net/calendar_zh_cn/japan_zh_cn.html
        元旦：1.1日
        成人节：1月8日
        建国纪念日：2月11日,12日补假
        天皇诞辰：2月23日
        春分节：3月20日
        昭和之日：4月29日
        宪法纪念日：5月3日
        绿之日：5月4日
        儿童节：5月5日，6日补假
        海洋节：7月15日
        山之日：8月11日，12日补假
        敬老节：9月16日
        秋分节：9月22日，23日补假
        体育节：10月14日
        文化节：11月3日，4日补假
        劳动感谢节：11月23日
        """
        self.year_at(2024) \
            .new_year().rest(1, 1) \
            .coming_of_age_day().rest(1, 8) \
            .national_foundation_day().rest(2, 11).to(2, 12) \
            .emperor_day().rest(2, 23) \
            .beginning_of_spring_day().rest(3,20) \
            .showa_day().rest(4,29) \
            .constitution_day().rest(5,3) \
            .greenery_day().rest(5,4) \
            .children_day().rest(5,5).to(5, 6)\
            .ocean_day().rest(7,15) \
            .mountain_day().rest(8,11).to(8, 12) \
            .respect_for_aged_day().rest(9,16) \
            .autumn_equinox_day().rest(9,22).to(9, 23) \
            .health_and_sports_day().rest(10,14) \
            .culture_day().rest(11,3).to(11, 4) \
            .labor_thanksgiving_day().rest(11,23)

    def _2023(self):
        """ https://holidays-calendar.net/calendar_zh_cn/japan_zh_cn.html
        元旦：1.1日，2日补假
        成人节：1月9日
        建国纪念日：2月11日
        天皇诞辰：2月23日
        春分节：3月21日
        昭和之日：4月29日
        宪法纪念日：5月3日
        绿之日：5月4日
        儿童节：5月5日
        海洋节：7月17日
        山之日：8月11日
        敬老节：9月18日
        秋分节：9月23日
        体育节：10月9日
        文化节：11月3日
        劳动感谢节：11月23日
        """
        self.year_at(2023) \
            .new_year().rest(1, 1).to(1, 2) \
            .coming_of_age_day().rest(1, 9) \
            .national_foundation_day().rest(2, 11) \
            .emperor_day().rest(2, 23) \
            .beginning_of_spring_day().rest(3,21) \
            .showa_day().rest(4,29) \
            .constitution_day().rest(5,3) \
            .greenery_day().rest(5,4)\
            .children_day().rest(5,5) \
            .ocean_day().rest(7,17) \
            .mountain_day().rest(8,11) \
            .respect_for_aged_day().rest(9,18) \
            .autumn_equinox_day().rest(9,23) \
            .health_and_sports_day().rest(10,9) \
            .culture_day().rest(11,3) \
            .labor_thanksgiving_day().rest(11,23)

    def year_at(self, number):
        self.year = number
        return self

    def new_year(self):
        """元旦 New Year's Day"""
        return self.mark(japanese_calendar.Holiday.new_years_day)

    def coming_of_age_day(self):
        """成人节 Coming of Age Day"""
        return self.mark(japanese_calendar.Holiday.coming_of_age_day)

    def beginning_of_spring_day(self):
        """春分节 Beginning of spring Day"""
        return self.mark(japanese_calendar.Holiday.beginning_of_spring_day)

    def national_foundation_day(self):
        """建国纪念日 National Foundation Day"""
        return self.mark(japanese_calendar.Holiday.national_foundation_day)

    def emperor_day(self):
        """天皇诞辰 Emperor's Birthday"""
        return self.mark(japanese_calendar.Holiday.emperor_birthday)

    def showa_day(self):
        """昭和之日 Showa Day"""
        return self.mark(japanese_calendar.Holiday.showa_day)

    def constitution_day(self):
        """宪法纪念日 Constitution Day"""
        return self.mark(japanese_calendar.Holiday.constitution_day)

    def greenery_day(self):
        """绿之日  Greenery Day"""
        return self.mark(japanese_calendar.Holiday.greenery_day)

    def children_day(self):
        """儿童节 Children Day"""
        return self.mark(japanese_calendar.Holiday.children_day)

    def ocean_day(self):
        """海洋节 Ocean Day"""
        return self.mark(japanese_calendar.Holiday.ocean_day)

    def mountain_day(self):
        """山之日 Mountain Day"""
        return self.mark(japanese_calendar.Holiday.mountain_day)

    def respect_for_aged_day(self):
        """敬老节 Respect for the Aged Day"""
        return self.mark(japanese_calendar.Holiday.respect_for_aged_day)

    def autumn_equinox_day(self):
        """秋分节 Autumn Equinox Day"""
        return self.mark(japanese_calendar.Holiday.autumn_equinox_day)

    def health_and_sports_day(self):
        """体育节 Health and Sports Day"""
        return self.mark(japanese_calendar.Holiday.health_and_sports_day)

    def culture_day(self):
        """文化节 Culture Day"""
        return self.mark(japanese_calendar.Holiday.culture_day)

    def labor_thanksgiving_day(self):
        """劳动感谢节 Labor Thanksgiving Day"""
        return self.mark(japanese_calendar.Holiday.labor_thanksgiving_day)

    def mark(self, holiday):
        self.holiday = holiday
        return self

    def work(self, month, day):
        return self.save(month, day, self.WORKDAY)

    def rest(self, month, day):
        return self.save(month, day, self.HOLIDAY)

    def in_lieu(self, month, day):
        """调休 in lieu"""
        return self.save(month, day, self.IN_LIEU)

    def save(self, month, day, day_type):
        if not self.year:
            raise ValueError("should set year before saving holiday")
        if not self.holiday:
            raise ValueError("should set holiday before saving holiday")
        self.day_type = day_type
        self.days[datetime.date(year=self.year, month=month, day=day)] = self.holiday
        self.month = month
        self.day = day
        return self

    def to(self, month, day):
        if not (self.year and self.month and self.day):
            raise ValueError("should set year/month/day before saving holiday range")
        start_date = datetime.date(year=self.year, month=self.month, day=self.day)
        end_date = datetime.date(year=self.year, month=month, day=day)
        if end_date <= start_date:
            raise ValueError("end date should be after start date")
        for i in range((end_date - start_date).days):
            the_date = start_date + datetime.timedelta(days=i + 1)
            self.days[the_date] = self.holiday
        return self

    @property
    def days(self):
        mapping = {self.HOLIDAY: self.holidays, self.IN_LIEU: self.in_lieu_days, self.WORKDAY: self.workdays}
        return mapping[self.day_type]
